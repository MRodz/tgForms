// Generated by CoffeeScript 1.7.1
var tgForms;

tgForms = (function() {

  /* Private constants */
  var addToJSONLD, parser, prefixCall, repReplace, repSearch, replacePrefixes, sortFields, store, storePrefixes, templates, util;

  function tgForms() {}

  repSearch = new RegExp("<span class=\"label\">(.*)<\/span>");

  repReplace = "<span class=\"label\">$1<\/span><span class=\"repeat\">" + "[Add One More]</span>";


  /* Private attributes */

  parser = N3.Parser();

  store = N3.Store();

  storePrefixes = {};

  templates = {};

  templates["tgforms:button"] = "<div class=\"form-group tgforms:button {{ rdf:Property }}\">\n <span class=\"label\">{{ rdfs:label }}</span>\n <div>\n <span class=\"value\">{{ tgforms:hasDefault }}</span>\n <button type=\"button\" class=\"btn btn-default\">Choose</button>\n </div>\n </div>";

  templates["tgforms:dropdown"] = "<div class=\"form-group tgforms:dropdown {{ rdf:Property }}\">\n <span class=\"label\">{{ rdfs:label }}</span>\n <div class=\"btn-group\">\n <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n <span class=\"value\">{{ tgforms:hasDefault }}</span><span class=\"caret\"></span>\n </button>\n <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n {{#tgforms:hasOption}}\n <li><a href=\"#\">{{.}}</a></li>\n {{/tgforms:hasOption}}\n </ul>\n </div>\n </div>";

  templates["tgforms:text"] = "<div class=\"form-group tgforms:text {{ rdf:Property }}\">\n <label>\n <span class=\"label\">{{ rdfs:label }}</span>\n <input type=\"text\" class=\"form-control\">\n </label>\n </div>";

  util = N3.Util;


  /* Private methods */

  addToJSONLD = function(jsonld, domObject) {
    var key, newValue, oldValue;
    key = domObject.closest("div.form-group").attr("class").replace(/.* /, "");
    oldValue = jsonld[key];
    if (domObject.val()) {
      newValue = domObject.val();
    } else {
      newValue = domObject.text();
    }
    if ((oldValue != null) && typeof oldValue === "object" && newValue) {
      jsonld[key].push(newValue);
    } else if ((oldValue != null) && typeof oldValue === "string" && newValue) {
      jsonld[key] = [oldValue, newValue];
    } else if (newValue) {
      jsonld[key] = newValue;
    }
    return jsonld;
  };

  prefixCall = function(prefix, uri) {
    store.addPrefix(prefix, uri);
    return storePrefixes[prefix] = uri;
  };

  replacePrefixes = function(string) {
    var prefix, uri;
    for (prefix in storePrefixes) {
      uri = storePrefixes[prefix];
      string = string.replace(uri, prefix + ":");
    }
    return string;
  };

  sortFields = function(a, b) {
    if (a["tgforms:hasPriority"] > b["tgforms:hasPriority"]) {
      return -1;
    } else if (a["tgforms:hasPriority"] < b["tgforms:hasPriority"]) {
      return 1;
    }
    return 0;
  };


  /* Public methods */

  tgForms.prototype.addTurtle = function(turtle, addCall) {
    var tripleCall;
    tripleCall = function(error, triple, prefixes) {
      if (triple) {
        return store.addTriple(triple);
      } else {
        return addCall();
      }
    };
    return parser.parse(turtle, tripleCall, prefixCall);
  };

  tgForms.prototype.getFormHTML = function(formTitle, getFormCall) {
    var field, fieldHTML, form, formHTML, formTriple, formTriples, key, propTriple, propTriples, template, value, _i, _j, _k, _len, _len1, _len2;
    form = [];
    formHTML = "<form role=\"form\" class=\"tgForms\">";
    formTriples = store.find(null, "tgforms:belongsToForm", formTitle);
    for (_i = 0, _len = formTriples.length; _i < _len; _i++) {
      formTriple = formTriples[_i];
      field = {};
      propTriples = store.find(formTriple.subject, null, null);
      field["rdf:Property"] = replacePrefixes(propTriples[0].subject);
      field["tgforms:hasOption"] = [];
      for (_j = 0, _len1 = propTriples.length; _j < _len1; _j++) {
        propTriple = propTriples[_j];
        key = propTriple.predicate;
        key = replacePrefixes(key);
        value = propTriple.object;
        if (util.isLiteral(value)) {
          value = util.getLiteralValue(value);
        }
        value = replacePrefixes(value);
        if (key === "tgforms:hasOption") {
          field["tgforms:hasOption"].push(value);
        } else {
          field[key] = value;
        }
      }
      field["tgforms:hasOption"] = field["tgforms:hasOption"].sort();
      field["tgforms:hasPriority"] = parseInt(field["tgforms:hasPriority"]);
      field["tgforms:isRepeatable"] = field["tgforms:isRepeatable"] === "true";
      form.push(field);
    }
    form = form.sort(sortFields);
    for (_k = 0, _len2 = form.length; _k < _len2; _k++) {
      field = form[_k];
      template = templates[field["tgforms:hasInput"]];
      fieldHTML = Mustache.render(template, field);
      if (field["tgforms:isRepeatable"]) {
        fieldHTML = fieldHTML.replace(repSearch, repReplace);
      }
      formHTML += fieldHTML;
    }
    formHTML += "</form>";
    return getFormCall(formHTML);
  };

  tgForms.prototype.getJSONLD = function(base, selector) {
    var jsonld;
    jsonld = {
      "@context": storePrefixes,
      "@id": base
    };
    $(selector + " input").each(function() {
      var $this;
      $this = $(this);
      return jsonld = addToJSONLD(jsonld, $this);
    });
    $(selector + " span.value").each(function() {
      var $this;
      $this = $(this);
      return jsonld = addToJSONLD(jsonld, $this);
    });
    return jsonld;
  };

  return tgForms;

})();

$(document).on("click", "span.repeat", function() {
  var $this, field, focusCall;
  $this = $(this);
  field = $this.closest("div.form-group").clone();
  $this.closest("div.form-group").after(field);
  focusCall = function() {
    return $this.closest("div.form-group").next().find("input").focus();
  };
  return setTimeout(focusCall, 25);
});

$(document).on("click", "ul.dropdown-menu li", function(e) {
  var $this;
  e.preventDefault();
  $this = $(this);
  return $this.closest("div.form-group").find("span.value").text($this.text());
});
